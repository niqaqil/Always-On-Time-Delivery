package GUI;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.border.Border;

public class GUIDelivery extends javax.swing.JFrame {

    private JFileChooser file;
    private String s;
    private InputData data;
    private Customer<Integer, Integer> cus;
    private Vehicle car;
    private int N;
    private int C;
    private int[][] loc;
    private int[] demand;
    private List<Customer> nodeList;

    public GUIDelivery() {
        initComponents();

        file = new JFileChooser();
        setTitle("Always On Time Delivery");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        s = "Select a text file";
        cus = new Customer<>();
        car = new Vehicle(0);
        nodeList = new ArrayList<>();
        filePathText.setText(s);
        Border blackline = BorderFactory.createLineBorder(Color.black);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        openFileButton = new javax.swing.JButton();
        instructionLabel = new javax.swing.JLabel();
        filePathText = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        selectSimulation = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        simulationLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Welcome to Delivery Simulation ");

        openFileButton.setText("Open file...");
        openFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileButtonActionPerformed(evt);
            }
        });

        instructionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        instructionLabel.setText("Selecct a text file:");
        instructionLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        filePathText.setText("File path");

        submitButton.setText("Submit");
        submitButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        selectSimulation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select Simulation--", "Basic simulation", "Greedy simulation", "MCTS simulation", "Best First Search simulation" }));
        selectSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSimulationActionPerformed(evt);
            }
        });

        simulationLabel.setBackground(new java.awt.Color(255, 255, 255));
        simulationLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        simulationLabel.setText("Simulation:");
        simulationLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        simulationLabel.setMaximumSize(new java.awt.Dimension(70, 20));
        jScrollPane1.setViewportView(simulationLabel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titleLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                        .addComponent(selectSimulation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(openFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filePathText, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(50, Short.MAX_VALUE))
            .addComponent(instructionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(instructionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openFileButton)
                    .addComponent(filePathText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(submitButton)
                .addGap(1, 1, 1)
                .addComponent(selectSimulation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileButtonActionPerformed
        file.setMultiSelectionEnabled(true);
        file.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        file.setFileHidingEnabled(false);
        if (file.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            JOptionPane.showMessageDialog(this, "File selected");
            java.io.File f = file.getSelectedFile();
            filePathText.setText(f.getPath());
        } else {
            JOptionPane.showMessageDialog(this, "No File choosen");
        }

    }//GEN-LAST:event_openFileButtonActionPerformed


    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
        s = filePathText.getText();
        //JOptionPane.showMessageDialog(this, s);
        cus.reset();
        data = new InputData(s);
        loc = data.getCoordinate();
        demand = data.getDemand();
        N = data.getN();
        C = data.getC();
        nodeList.clear();
        nodeList.add(new Depot(N, C, loc[0][0], loc[0][1]));
        for (int i = 1; i < loc.length; i++) {
            nodeList.add(new Customer(loc[i][0], loc[i][1], demand[i]));
        }
        car.setCapacity(C);
        for (int i = 0; i < data.getN(); i++) {
            cus.addCustomer(i, loc[i][0], loc[i][1], demand[i]);
        }
        String info = "Customer and their demand\n";
        //System.out.println("Number of Customer: " + (cus.getSize()-1));
        //System.out.println("Customer and their demand");
        for (int i = 0; i < cus.getSize(); i++) {
            if (i == 0) {
                //System.out.println("Depot" + cus.getCoordinate(i) + ": " + cus.getDemand(i));
                info += "Depot" + cus.getCoordinate(i) + ": " + cus.getDemand(i) + "\n";
            } else {
                //System.out.println("Customer " + i + cus.getCoordinate(i) + ": "  + cus.getDemand(i));
                info += "Customer " + i + cus.getCoordinate(i) + ": " + cus.getDemand(i) + "\n";
            }
        }
        //System.out.println(info);
        //System.out.println("Capacity of vehicle: " + car.getCapacity());

        for (int i = 0; i < cus.getSize(); i++) {
            for (int j = 0; j < cus.getSize(); j++) {
                cus.addEdge(i, j, cus.calCost(i, j));
            }
        }
        simulationLabel.setText(convertToMultiline(info));

        selectSimulation.setSelectedIndex(0);
    }//GEN-LAST:event_submitButtonActionPerformed


    private void selectSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSimulationActionPerformed
        String select = selectSimulation.getItemAt(selectSimulation.getSelectedIndex());
        switch (select) {
            case "Basic simulation":
                BasicSearch bfs = new BasicSearch(nodeList);
                bfs.searchRoute();
                simulationLabel.setText(convertToMultiline(bfs.toString()));
                break;
            case "Greedy simulation":
                GreedySearch greedy = new GreedySearch();
                greedy.searchRoute(cus, car);
                simulationLabel.setText(convertToMultiline(greedy.toString()));
                break;
            case "MCTS simulation":
                MCTS mcts = new MCTS((ArrayList<Customer>) nodeList);
                mcts.search(3, 100);
                simulationLabel.setText(convertToMultiline(mcts.toString()));
                break;
            case "Best First Search simulation":
                BestFirstSearch best = new BestFirstSearch();
                best.searchRoute(data, cus, car);
                simulationLabel.setText(convertToMultiline(best.toString()));
                break;
        }
    }//GEN-LAST:event_selectSimulationActionPerformed

    public static String convertToMultiline(String orig) {
        return "<html>" + orig.replaceAll("\n", "<br>");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIDelivery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIDelivery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIDelivery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIDelivery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIDelivery().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField filePathText;
    private javax.swing.JLabel instructionLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton openFileButton;
    private javax.swing.JComboBox<String> selectSimulation;
    private javax.swing.JLabel simulationLabel;
    private javax.swing.JButton submitButton;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

}
